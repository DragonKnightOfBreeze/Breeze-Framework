# breeze-dsl的类图

# 文件结构：
# root
# - DslAnnotations
#   - Dsl Marker Annotations
#   - Dsl Feature Annotations
# - DslDefinitions
#   - Dsl Interfaces
#   - Dsl Document
#   - Dsl Config
#   - Dsl Elements
#   - Dsl Enums
# - DslExtensions
#   - Top Dsl Functions
#   - Inline Dsl Functions
#   - Dsl Functions
#   - Infix Dsl Functions
#   - Utility Dsl Functions

# 暂时只包含公共api
# Dsl标记注解仅标记：顶级声明，Dsl文档，Dsl构建方法

namespace ext:
  interface Inlineable: {}

namespace c.w.b.d:
  annotation DslApiMarker: {}
  annotation DslFile: {}

  # @DslApiMarker
  interface Dsl:
  - override fun toString():String
  # @DslApiMarker
  interface DslEntry:
  - fun toContentString():String
  # @DslApiMarker
  interface DslElement:
  - override fun toString():String

  # @DslApiMarker
  interface Wrappable:
  - var wrapContent:Boolean
  # @DslApiMarker
  interface Indentable:
  - var indentContent:Boolean
  # @DslApiMarker
  interface Splitable:
  - var splitContent:Boolean
  # @DslApiMarker
  interface Generatable:
  - var generateContent:Boolean

  # @DslApiMarker
  interface WithId:
  - val id:String
  # @DslApiMarker
  interface WithNode:
  - val sourceNodeId:String
  - val targetNodeId:String
  # @DslApiMarker
  interface WithTransaction<in N:WIthId,T:WithNode>:
  # @DslApiMarker
  - infix fun String.links(other:String):T
  # @DslApiMarker
  - infix fun String.links(other:N):T = this@WithTransition.run { this@links links other.id }
  # @DslApiMarker
  - infix fun N.links(other:String):T = this@WithTransition.run { this@links.id links other }
  # @DslApiMarker
  - infix fun N.links(other:N):T = this@WithTransition.run { this@links.id links other.id }
  # @DslApiMarker
  - infix fun T.links(other:String):T = this@WithTransition.run { this@links.targetNodeId links other }
  # @DslApiMarker
  - infix fun T.links(other:N):T = this@WithTransition.run { this@links.targetNodeId links other.id }

  class Extensions <<(E,pink)>>:
  # @DslApiMarker
  - infix fun <T:Wrappable> T.indent(value:Boolean):T
  # @DslApiMarker
  - infix fun <T:Wrappable> T.wrap(value:Boolean):T
  # @DslApiMarker
  - infix fun <T:Splitable> T.split(value:Boolean):T
  # @DslApiMarker
  - infix fun <T:Generatable> T.generate(value:Boolean):T

namespace c.w.b.d.criticmarkup:
  anontation CriticMarkupDslMarker: {}

  # @CriticMarkupMarker
  class CriticMarkupDsl implements CriticMarkupDslEntry:
  - val content:StringBuilder

  # @CriticMarkupMarker
  interface CriticMarkupDslEntry extends c.w.b.d.DslEntry: {}
  # @CriticMarkupMarker
  interface CriticMarkupDslElement extends c.w.b.d.DslElement,ext.Inlineable: {}

  abstract class Mark implements CriticMarkupDslElement: {}
  class Addition extends Mark:
  - val text:CharSequence
  class Deletion extends Mark:
  - val text:CharSequence
  class Substitution extends Mark:
  - val text:CharSequence
  - val newText:CharSequence
  class Comment extends Mark:
  - val text:CharSequence
  class Highlight extends Mark:
  - val text:CharSequence

  class Extensions <<(E,pink)>>:
  # @CriticMarkupMarker
  - fun criticMarkup(block:Document.() -> CharSequence):Document
  # @CriticMarkupMarker
  - fun InlineDslEntry.append(text:CharSequence):Addition
  # @CriticMarkupMarker
  - fun InlineDslEntry.delete(text:CharSequence):Deletion
  # @CriticMarkupMarker
  - fun InlineDslEntry.substitute(text:CharSequence, newText:CharSequence):Substitution
  # @CriticMarkupMarker
  - fun InlineDslEntry.comment(text:CharSequence):Comment
  # @CriticMarkupMarker
  - fun InlineDslEntry.highlight(text:CharSequence):HighlightText

# TODO 以下

namespace c.w.b.d.commandline:
  interface InlineDslEntry extends c.w.b.d.DslEntry,c.w.b.d.Inlineable: {}
  interface InlineDslElement extends c.w.b.d.DslElement: {}

  class Document implements InlineDslEntry:
  - var text:CharSequence

  interface RichText extends InlineDslElement:
  - val text:CharSequence
  class BoldText implements RichText:
  - val text:CharSequence
  class LightText implements RichText:
  - val text:CharSequence
  class ItalicText implements RichText:
  - val text:CharSequence
  class UnderlineText implements RichText:
  - val text:CharSequence
  class BlinkText implements RichText:
  - val text:CharSequence
  class InvertText implements RichText:
  - val text:CharSequence
  class ColoredText implements RichText:
  - val text:CharSequence,
    val color:Color

  enum Color:
  - internal val code:Int
  enum Style:
  - internal val code:Int

  class Extensions <<(E,pink)>>:
  - fun commandLineText(block:Document.() -> CharSequence):Document
  - fun InlineDslEntry.bold(text:CharSequence):BoldText
  - fun InlineDslEntry.light(text:CharSequence):LightText
  - fun InlineDslEntry.italic(text:CharSequence):ItalicText
  - fun InlineDslEntry.underline(text:CharSequence):UnderlineText
  - fun InlineDslEntry.blink(text:CharSequence):BlinkText
  - fun InlineDslEntry.invert(text:CharSequence):InvertText
  - fun InlineDslEntry.color(text:CharSequence, color:Color):ColoredText
  - fun InlineDslEntry.bgColor(text:CharSequence, color:Color):BgColoredText
  - fun InlineDslEntry.style(text:CharSequence, vararg styles:Style):StyledText

namespace c.w.b.d.xml:
  interface IDslEntry extends c.w.b.d.DslEntry: {}
  interface IDslElement extends c.w.b.d.DslElement: {}

  class Document implements IDslEntry:
  - val declarations:MutableList<Statement>
  - var rootElement:Element?
  - operator fun String.invoke(vararg args:Arg, block:Block<Element>):Element

  class Statement implements IDslElement:
  - val attributes:Map<String, Any?>
  interface Node extends IDslElement: {}
  class Element implements Node,Wrappable,Indentable:
  - val name:String
  - val attributes:Map<String, Any?>
  - val nodes:MutableList<Node>
  - operator fun String.unaryPlus():Text
  - operator fun String.invoke(vararg args:Arg, block:Block<Element>)
  class Text implements Node:
  - val text:String
  class CData implements Node,c.w.b.d.Wrappable,c.w.b.d.Indentable:
  - val text:String

  class Config:
  - var indent:String
  - var doubleQuoted:Boolean
  - var autoCloseTag:Boolean
  - val quote:Char

  class Extensions <<(E,pink)>>:
  - fun xml(block:Document.() -> Unit):Document
  - fun Document.configure(block:Config.() -> Unit):Document
  - fun Document.statement(vararg attributes:Pair<String, Any?>):Statement
  - fun Document.element(name:String, vararg attributes:Pair<String, Any?>, block:Element.() -> Unit = {}):Element
  - fun Element.element(name:String, vararg attributes:Pair<String, Any?>, block:Element.() -> Unit = {}):Element
  - fun Element.text(text:String):Text
  - fun Element.cdata(text:String):CData

#namespace c.w.b.d.creole:
#  TODO

#namespace c.w.b.d.markdown:
#  TODO

#namespace c.w.b.d.bbcode:
#  TODO

namespace c.w.b.d.flow:
  interface IDslEntry extends c.w.b.d.DslEntry,c.w.b.d.Splitable: {}
  interface IDslElement extends c.w.b.d.DslElement: {}
  interface WithDirection :
  - val direction:ConnectionDirection?

  class Document implements IDslEntry,c.w.b.d.WithTransaction:
  - val nodes:MutableSet<Node>
  - val connections:MutableList<Connection>

  class Node implements IDslElement,c.w.b.d.WithId:
  - val name:String
  - val type:NodeType
  - var text:String? = null
  - var flowState:String? = null
  - var urlLink:String? = null
  - var openNewTab:Boolean = false
  - infix fun text(text:String):Node
  - infix fun flowState(flowState:String):Node
  - infix fun urlLink(urlLink:String):Node
  - infix fun newUrlLink(urlLink:String):Node
  class Connection implements IDslElement,c.w.b.d.WithNode :
  - val fromNodeId:String
  - val toNodeId:String
  - var status:ConnectionStatus?
  - var path:ConnectionPath?
  - var direction:ConnectionDirection?

  enum NodeType:
  - internal val text:String
  enum ConnectionStatus:
  - internal val text:String
  enum ConnectionPath:
  - internal val text:String
  enum ConnectionDirection:
  - internal val text:String

  class Extensions <<(E,pink)>>:
  - fun flowChart(block:Document.() -> Unit):Document
  - fun IDslEntry.start(name:String):Node
  - fun IDslEntry.end(name:String):Node
  - fun IDslEntry.operation(name:String):Node
  - fun IDslEntry.inputOutput(name:String):Node
  - fun IDslEntry.subroutine(name:String):Node
  - fun IDslEntry.condition(name:String):Node
  - fun IDslEntry.parallel(name:String):Node
  - fun IDslEntry.connection(fromNodeId:String, toNodeId:String):Node

namespace c.w.b.d.sequence:
  interface IDslEntry extends c.w.b.d.DslEntry,c.w.b.d.Splitable:
  - val participants:MutableSet<Participant>
  - val messages:MutableList<Message>
  - val notes:MutableList<Note>
  interface IDslElement extends c.w.b.d.DslElement: {}

  class Document implements IDslEntry,c.w.b.d.WithTransaction:
  - var title:Title?
  - override val participants:MutableSet<Participant>
  - override val messages:MutableList<Message>
  - override val notes:MutableList<Note>

  class Title implements IDslElement:
  - val text:String
  class Participant implements IDslElement,c.w.b.d.WIthId:
  - val name:String
  - var alias:String?
  - infix fun alias(alias:String):Participant
  class Message implements IDslElement,c.w.b.d.WithNode:
  - val fromParticipantId:String
  - val toParticipantId:String
  - var text:String
  - var arrowShape:ArrowShape
  - infix fun text(text:String):Message
  - infix fun arrowShape(arrowShape:ArrowShape) :Message
  class Note implements IDslElement:
  - val location:NoteLocation
  - var text:String
  - infix fun text(text:String):Note
  class NoteLocation:
  - val position:NotePosition
  - val participantId1:String
  - val participantId2:String?

  enum ArrowShape:
  - internal val text:String
  enum NotePosition:
  - internal val text:String

  class Extensions <<(E,pink)>>:
  - fun sequenceDiagram(block:Document.() -> Unit):Document
  - fun IDslEntry.leftOf(participantId:String):NoteLocation
  - fun IDslEntry.rightOf(participantId:String):NoteLocation
  - fun IDslEntry.over(participantId1:String, participantId2:String):NoteLocation
  - fun Document.title(text:String):Title
  - fun IDslEntry.participant(name:String):Participant
  - fun IDslEntry.message(fromParticipantId:String, toParticipantId:String):Message
  - fun IDslEntry.message(fromParticipantId:String,arrowShape:ArrowShape,toParticipantId:String):Message
  - fun IDslEntry.note(location:NoteLocation):Note

#namespace c.w.b.d.mermaid:
#  TODO
