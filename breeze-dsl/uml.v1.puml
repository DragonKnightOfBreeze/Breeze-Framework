@startuml

''breeze-dsl

package com.windea.breezeframework.dsl{
  interface DslDocument
  interface DslEntry
  interface DslElement
}

package com.windea.breezeframework.dsl.DslFeatures{
  interface Wrappable{
    var wrapContent:Boolean
  }
  interface Indentable{
    var indentContent:Boolean
  }
  interface Splitable{
	  var splitContent:Boolean
	}
  interface Generatable{
	  var generateContent:Boolean
  }

  interface WithId{
    val id:String
  }
  interface WithNode{
  	val sourceNodeId:String
	  val targetNodeId:String
  }
  interface WithTransaction<in N:WIthId,T:WithNode>{
    infix fun String.links(other:String):T
    ...
  }

  interface UPlus<out T>{
	  operator fun String.unaryPlus():T
	}
  interface UMinus<out T>{
    operator fun String.unaryMinus():T
	}
  interface Invoke<out T>{
    operator fun String.invoke(block:Block<T> = {}):T
  }
  interface InvokeArgs<out T>{
    operator fun String.invoke(vararg args:Arg, block:Block<T> = {}):T
  }

  class DslExtensions <<(E,pink)>>{
    infix fun <T:Wrappable> T.indent(value:Boolean):T
    infix fun <T:Wrappable> T.wrap(value:Boolean):T
    infix fun <T:Splitable> T.split(value:Boolean):T
    infix fun <T:Generatable> T.generate(value:Boolean):T
  }
}

''breeze-dsl-xml

package com.windea.breezeframework.dsl.xml{
  class Document extends DslDocument,UMinus,InvokeArgs{
    val declarations:MutableList<Statement>
    val comments:MutableList<Comment>
    var rootElement:Element?
  }

  class Config{
    var indent:String
    var doubleQuoted:Boolean
    var autoCloseTag:Boolean
    val quote get():Char
  }

  interface IDslElement extends DslElement

  class Statement implements IDslElement{
    val attributes:Map<String, Any?>
  }

  interface Node extends IDslElement
  class Element implements DslEntry,Node,Wrappable,Indentable,UPlus,InvokeArgs,WithId{
    val name:String
    val attributes:Map<String, Any?>
    val nodes:MutableList<Node>
  }
  class Text implements Node{
    val text:String
  }
  class CData implements Node,Wrappable,Indentable{
    val text:String
  }

  class XmlExtensions <<(E,pink)>>{
    fun xml(block:Document.() -> Unit):Document
    fun Document.configure(block:Config.() -> Unit):Document
    fun Document.statement(vararg attributes:Pair<String, Any?>):Statement
    fun Document.element(name:String, vararg attributes:Pair<String, Any?>, block:Element.() -> Unit = {}):Element
    fun Element.element(name:String, vararg attributes:Pair<String, Any?>, block:Element.() -> Unit = {}):Element
    fun Element.text(text:String):Text
    fun Element.cdata(text:String):CData
  }
}
@enduml
